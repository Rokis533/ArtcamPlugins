<!DOCTYPE html>
<html>

<head>
    <!-- Load Scripts DO NOT ALTER -->
    <script src='../../html/SharedScripts/api.js'></script>
    <script src='../../html/SharedScripts/utils.js'></script>
    <script src='../../html/SharedScripts/edit.js'></script>

    <script src="../../html/ai.Widgets/jquery.js"></script>
    <script src="../../html/ai.Widgets/ai.js"></script>
    <script src="../../html/ai.Widgets/ai.select.js"></script>
    <script src="LayoutTools.js"></script>
    <script src="ToShapes.atext"></script>

    <!-- Setup styles DO NOT ALTER -->
    <link href='styles.css' rel="stylesheet">
</head>

<body onLoad='Initialise()'>

    <!-- Put your HTML here ------------------------------------------------------->
    <script>
        ai.Heading(_lc("Multiplikavimas"));
        ai.VBox();
        ai.HBox();
        ai.End();
        ai.End();
        <!-- Additional code removed for brevity -->
    </script>

    <!-- Input fields and buttons for vector size and multiplication -->
    <div align='right' style="MARGIN-RIGHT: 10px">
        <br>
        <!-- Input fields for X and Y values -->
        X= <input type="number" id="inputX" min="2" value="2" style="height: 5mm; width: 20mm;"><br>
        Y= <input type="number" id="inputY" min="2" value="2" style="height: 5mm; width: 20mm;"><br>
        <br>
        <!-- Buttons to test individual functionalities -->
        <input type="button" value="Measure Vector Size" onclick="testMeasureVectorSize()">
        <br>
        <br>
        <input type="button" value="Create Layer with Measured Size" onclick="testCreateLayerWithSize()">
        <br>
        <br>
        <input type="button" value="Multiply Vectors" onclick="testMultiplyVectors()">
        <br>
        <br>
        <!-- Button to perform all functionalities together -->
        <input type="button" value="Multiplication" onclick="performMultiplication()">
        <hr>
        <input type="button" id="CloseButton" onclick="history.back()">
        <script>CloseButton.value = "Close"</script>
        <p></p>
    </div>

    <!-- Scripting Area - Put your Script functions in here ----------------------->
    <script>
        function Initialise() {
            SetHeaderTitle('Vector Layer Template', './Vector Layer Template/icon.gif');
            SubclassNumberEditControls();
        }

        function measureVectorSize() {
            var selection = artcam.VectorSelection.Selection;
            if (selection == "") {
                artcam.MessageBox(_lc("Please select vector first."));
                return null;
            }

            var selectionArray = selection.split(',');
            var minX = Number.MAX_VALUE, minY = Number.MAX_VALUE;
            var maxX = Number.MIN_VALUE, maxY = Number.MIN_VALUE;

            for (var i = 0; i < selectionArray.length; i++) {
                artcam.VectorSelection.Selection = selectionArray[i];
                minX = Math.min(minX, artcam.SelectionMinX);
                minY = Math.min(minY, artcam.SelectionMinY);
                maxX = Math.max(maxX, artcam.SelectionMaxX);
                maxY = Math.max(maxY, artcam.SelectionMaxY);
            }

            var width = Math.ceil(maxX - minX) + 5;
            var height = Math.ceil(maxY - minY) + 5;

            artcam.VectorSelection.AddToSelection(selection);

            return { width: width, height: height };
        }

        function createLayerWithSize(width, height) {
            if (width <= 0 || height <= 0) {
                artcam.MessageBox(_lc("Invalid vector dimensions."));
                return -1;
            }

            var layerName = "x=" + width + "; y=" + height;
            var idx = artcam.VectorLayers.Create(0, layerName);
            if (idx != -1) {
                var layer = artcam.VectorLayers.GetLayer(idx);
                layer.color = 0x000000;
            }
            return idx;
        }

        function multiplyVectors(xCount, yCount, vectorSize, layerIdx) {
            var vselection = artcam.VectorSelection;
            if (vselection.Selection == "") {
                artcam.MessageBox(_lc("Please select a vector first."));
                return false;
            }
            var originalSelection = vselection.Selection;
            var newSelection = [];

            for (var y = 0; y < yCount; y++) {
                for (var x = 0; x < xCount; x++) {
                    if (x === 0 && y === 0) continue;

                    artcam.VectorSelection.Selection = originalSelection;

                    var currentSelectionArray = artcam.VectorSelection.Selection.split(',');

                    for (var i = 0; i < currentSelectionArray.length; i++) {
                        artcam.VectorSelection.Selection = currentSelectionArray[i];
                        artcam.MirrorVectors(0, true, false);
                        artcam.VectorSelection.Move(x * vectorSize.width * 2, y * vectorSize.height * 2);

                        if (x % 2 !== 0) {
                            artcam.MirrorVectors(0, false, false);
                        }
                        if (y % 2 !== 0) {
                            artcam.MirrorVectors(3, false, false);
                        }

                        newSelection.push(artcam.VectorSelection.Selection);
                    }
                }
            }

            var combinedSelection = originalSelection.split(',').concat(newSelection).join(',');
            artcam.VectorSelection.Selection = combinedSelection;

            var success = copyToLayer(combinedSelection, layerIdx);
            if (!success) {
                artcam.MessageBox(_lc("Failed to move vectors to the new layer."));
                return false;
            }

            return true;
        }

        function copyToLayer(selection, layerIdx) {
            artcam.VectorSelection.Selection = selection;
            var vectors = artcam.GetVectorData(selection);
            artcam.VectorSelection.ClearSelection();

            for (var i = 0; i < vectors.length; i++) {
                artcam.VectorLayers.GetLayer(layerIdx).AddVector(vectors[i]);
            }

            return true;
        }


        function performMultiplication() {
            var size = measureVectorSize();
            if (size === null) return;

            var layerIdx = createLayerWithSize(size.width, size.height);
            if (layerIdx === -1) return;

            var xValue = parseFloat(document.getElementById("inputX").value);
            var yValue = parseFloat(document.getElementById("inputY").value);

            if (isNaN(xValue) || isNaN(yValue)) {
                artcam.MessageBox(_lc("Please enter valid numbers for X and Y."));
                return;
            }

            var success = multiplyVectors(xValue, yValue, size, layerIdx);

            if (success) {
                artcam.MessageBox(_lc("Vector multiplication complete. Created " + (xValue * yValue - 1) + " copies."));
            } else {
                artcam.MessageBox(_lc("Vector multiplication failed."));
            }
        }

        // Test functions for individual functionalities
        function testMeasureVectorSize() {
            var size = measureVectorSize();
            if (size) {
                artcam.MessageBox(_lc("Vector size: width=" + size.width + ", height=" + size.height));
            }
        }

        function testCreateLayerWithSize() {
            var size = measureVectorSize();
            if (size === null) return;

            var idx = createLayerWithSize(size.width, size.height);
            if (idx !== -1) {
                artcam.MessageBox(_lc("Created layer with measured size: width=" + size.width + ", height=" + size.height));
            }
        }

        function testMultiplyVectors() {
            var size = measureVectorSize();
            if (size === null) return;

            var layerIdx = createLayerWithSize(size.width, size.height);
            if (layerIdx === -1) return;

            var xValue = parseFloat(document.getElementById("inputX").value);
            var yValue = parseFloat(document.getElementById("inputY").value);

            if (isNaN(xValue) || isNaN(yValue)) {
                artcam.MessageBox(_lc("Please enter valid numbers for X and Y."));
                return;
            }

            var success = multiplyVectors(xValue, yValue, size, layerIdx);

            if (success) {
                artcam.MessageBox(_lc("Vector multiplication test complete. Created " + (xValue * yValue - 1) + " copies."));
            } else {
                artcam.MessageBox(_lc("Vector multiplication test failed."));
            }
        }

    </script>
</body>

</html>